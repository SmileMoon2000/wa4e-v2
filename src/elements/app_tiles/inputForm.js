import { html } from 'lit';
import { TileBase } from './tileBase';
import '../mySubComponents.js';

class inputTile extends TileBase {
  render() {
    this.formFields = this.appConf.fields;
    this.subComponents = this.appConf.subComponents;
    this.input_fields = this.arrangeFields();

    return [
      super.render(),
      html`
        <!-- This 'div' defines the tile as a grid item and the style options
      defines the corners of the tile on the grid. -->
        <div>
          <h2>${this.appConf.title}</h2>
          <!-- input form autogenerated fields -->
          <div>${this.input_fields}</div>
          <div class="d-grid gap-2 d-md-flex justify-content-md-around p-2">
            <!-- buttons -->
            <button
              class="btn btn-primary col-sm-12 col-md-6"
              @click=${() => this.appUpdate()}
            >
              SUBMIT
            </button>
            <button
              class="btn btn-outline-secondary col"
              @click=${() => this.tileReload()}
            >
              RESET
            </button>
            <button
              class="btn btn-outline-info col"
              @click=${() => this.showHelp()}
            >
              HELP
            </button>
          </div>
        </div>
      `,
    ];
  }

  arrangeFields() {
    return html`${Object.keys(this.formFields).map((keyOuter, index) => {
      const subComponent = this.subComponents.find(
        element => element.index === index
      );
      let htmlReturn = html``;
      if (typeof subComponent === 'undefined') {
        htmlReturn = html`
          <h3>${keyOuter}</h3>
          ${this.makeNestedCallbackFields(keyOuter)}
        `;
      } else {
        /* eslint-disable no-nested-ternary */
        htmlReturn = html` ${subComponent.position === 'beforeTitle'
          ? html`
              ${this.makeSubComponent(index)}
              <h3>${keyOuter}</h3>
              ${this.makeNestedCallbackFields(keyOuter)}
            `
          : subComponent.position === 'afterTitle'
          ? html`
              <h3>${keyOuter}</h3>
              ${this.makeSubComponent(index)}
              ${this.makeNestedCallbackFields(keyOuter)}
            `
          : subComponent.position === 'afterContent'
          ? html`
              <h3>${keyOuter}</h3>
              ${this.makeSubComponent(index)}
              ${this.makeNestedCallbackFields(keyOuter)}
            `
          : html`<p>SubComponentPositionUndefined</p>`}`;
        /* eslint-enable no-nested-ternary */
      }
      return htmlReturn;
    })}`;
  }

  appUpdate() {
    const myEvent = new CustomEvent('updated', {
      bubbles: true,
      composed: true,
    });
    this.dispatchEvent(myEvent);
  }

  tileReload() {
    const myEvent = new CustomEvent('reset', {
      bubbles: true,
      composed: true,
    });
    this.dispatchEvent(myEvent);
  }

  showHelp() {
    // eslint-disable-next-line no-alert
    window.alert(this.appConf.helpText);
  }
}
customElements.define('input-tile', inputTile);
