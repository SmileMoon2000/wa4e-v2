import { html } from 'lit';
import { TileBase } from './tileBase';

class inputTile extends TileBase {
  render() {
    this.formFields = this.appConf.fields;
    this.input_fields = this.makeNestedCallbackFields();
    return [
      super.render(),
      html`
        <!-- This 'div' defines the tile as a grid item and the style options
      defines the corners of the tile on the grid. -->
        <div>
          <h2>${this.appConf.title}</h2>
          <!-- input form autogenerated fields -->
          <div>${this.input_fields}</div>
          <div class="d-grid gap-2 d-md-flex justify-content-md-around p-2">
            <!-- buttons -->
            <button
              class="btn btn-primary col-sm-12 col-md-6"
              @click=${() => this.appUpdate()}
            >
              SUBMIT
            </button>
            <button
              class="btn btn-outline-secondary col"
              @click=${() => this.tileReload()}
            >
              RESET
            </button>
            <button
              class="btn btn-outline-info col"
              @click=${() => this.showHelp()}
            >
              HELP
            </button>
          </div>
        </div>
      `,
    ];
  }

  makeNestedCallbackFields() {
    return html`${Object.keys(this.formFields).map(
      keyOuter =>
        html`<h3>${keyOuter}</h3>
          ${Object.keys(this.appConf.fields[`${keyOuter}`]).map(
            key =>
              html` <div class="input-group">
                <span class="input-group-text col-auto text-wrap text-break"
                      for="${key}"
                      style="width: 25%; text-align: right;"
                  >${html([key])}</span>
                <input
                  class="form-control"
                  id="${key}"
                  .value="${this.appConf.fields[keyOuter][key][0]}"
                  @change=${e => {
                    this.appConf.fields[keyOuter][key][0] = e.target.value;
                  }}
                />
                <span class="input-group-text col-auto text-wrap text-break"
                      for="${key}"
                      style="width: 20%; text-align: left;"
                  >${html([this.appConf.fields[keyOuter][key][1]])}</span>
              </div>`
          )}`
    )}`;
  }

  appUpdate() {
    const myEvent = new CustomEvent('updated', {
      bubbles: true,
      composed: true,
    });
    this.dispatchEvent(myEvent);
  }

  tileReload() {
    const myEvent = new CustomEvent('reset', {
      bubbles: true,
      composed: true,
    });
    this.dispatchEvent(myEvent);
  }

  showHelp() {
    // eslint-disable-next-line no-alert
    window.alert(this.appConf.helpText);
  }
}

customElements.define('input-tile', inputTile);
